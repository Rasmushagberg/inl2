package inl2;

import java.awt.Color;
import se.lth.cs.ptdc.fractal.MandelbrotGUI;

public class MandelbrotCalc {
    static final int max_iter = 200;
  
    public MandelbrotCalc(MandelbrotGUI gui){
    }
    
    public void render(MandelbrotGUI gui) {
		gui.disableInput();
		int pixelsize = 1;

		switch (gui.getResolution()) {
		case MandelbrotGUI.RESOLUTION_VERY_HIGH:
			pixelsize = 1;
			break;
		case MandelbrotGUI.RESOLUTION_HIGH:
			pixelsize = 3;
			break;
		case MandelbrotGUI.RESOLUTION_MEDIUM:
			pixelsize = 5;
			break;
		case MandelbrotGUI.RESOLUTION_LOW:
			pixelsize = 7;
			break;
		case MandelbrotGUI.RESOLUTION_VERY_LOW:
			pixelsize = 9;
			break;
		}
    	
		int height = gui.getHeight();
		int width = gui.getWidth();
		Complex[][] mesh = new Complex[height][width];
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				mesh[i][j] = new Complex(
						(gui.getMinimumReal() + ((gui.getMaximumReal() - gui.getMinimumReal()) / (width - 1)) * j),
						(gui.getMaximumImag() - ((gui.getMaximumImag() - gui.getMinimumImag()) / (height -1 ) * i)));
			}
		}
		
		int colorheight = (height / pixelsize);
		int colorwidth = (width / pixelsize);
		Color[][] picture = new Color[colorheight][colorwidth];
		
		for (int i = 0; i < colorheight; i ++) {
			for (int j = 0; j < colorwidth; j++) {
				int icomplex = i * pixelsize + pixelsize/2;
				int jcomplex = j * pixelsize + pixelsize/2;
				Complex c = mesh[icomplex][jcomplex];
				Complex z = new Complex(0,0);
				int n = 0;
				
				while (n < max_iter && z.getAbs2() <= 4) {
					n++;
					z.mul(z);
					z.add(c);
				}
				
				if (z.getAbs2() <= 4) {
					picture[i][j] = new Color(0,0,0);
				} else {
					picture[i][j] = new Color(255,255,255);
				}
			}
		}
		gui.putData(picture, pixelsize, pixelsize);
    	gui.enableInput();
    }
}
