import java.awt.Color;
import se.lth.cs.ptdc.fractal.MandelbrotGUI;

public class Render {

	private MandelbrotGUI gui = new MandelbrotGUI();
	private Complex[][] complex;
	private Color[][] picture;

	// private int gui.getHeight();
	// private int width;
	// private double minRe;
	// private double maxRe;
	// private double minIm;
	// private double maxIm;

	public Render(MandelbrotGUI gui) {

		// this.gui.getHeight() = gui.getgui.getHeight()();
		// this.width = gui.getWidth();

		this.gui = gui;
		complex = new Complex[gui.getHeight()][gui.getWidth()];
		picture = new Color[gui.getHeight()][gui.getWidth()];

	}

	public void render(MandelbrotGUI gui) {

		gui.disableInput();

		mesh(gui.getMinimumReal(), gui.getMaximumReal(), gui.getMinimumImag(),
				gui.getMaximumImag(), gui.getWidth(), gui.getHeight());

		for (int i = 0; i < gui.getHeight(); i++) {
			for (int j = 0; j < gui.getWidth(); j++) {

				if (complex[i][j].getRe() > 0
						&& complex[i][j].getRe() < (Math
								.sqrt(0.25 - ((complex[i][j].getIm()) * (complex[i][j]
										.getIm()))))) {

					if (complex[i][j].getIm() > 0) {
						picture[i][j] = new Color(255, 0, 0);
					} else
					// if (complex[i][j].getIm() < 0)
					{
						picture[i][j] = new Color(0, 255, 0);
					}

				} else if (complex[i][j].getRe() < 0
						&& complex[i][j].getRe() > -(Math
								.sqrt(0.25 - ((complex[i][j].getIm()) * (complex[i][j]
										.getIm()))))) {

					if (complex[i][j].getIm() < 0) {
						picture[i][j] = new Color(0, 0, 255);
					} else
					// if (complex[i][j].getIm() > 0)
					{
						picture[i][j] = new Color(0, 255, 255);
					}

				} else {
					picture[i][j] = new Color(255, 255, 255);
				}
			}
		}

		gui.putData(picture, 1, 1);

		gui.enableInput();

	}

	private Complex[][] mesh(double minRe, double maxRe, double minIm,
			double maxIm, int width, int height) {

		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				complex[i][j] = new Complex((j * maxRe - minRe
						* (j + 1 - width))
						/ (width - 1), -(i * maxIm - minIm * (i + 1 - height)
						/ (height - 1)));

			}
		}
		return complex;
	}

}
